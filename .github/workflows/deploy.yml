name: Build and Deploy to ECR

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    permissions:
      id-token: write
      contents: read
    
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with: 
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/agronet-dev-env-GitHubActionsRole-ZV3gmmbCMTZs
          aws-region: ${{ secrets.AWS_REGION }}
          audience: sts.amazonaws.com
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: NodeJsDevEnvironment-repo
          IMAGE_TAG: ${{ github.sha }}
          # Environment variables for the application
          MONGO_URI: ${{ secrets.MONGO_URI }}
          PORT: ${{ secrets.PORT || '5000' }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          NODE_ENV: development
        run: |
          # Build with build-args to pass environment variables
          docker build \
            --build-arg MONGO_URI="${MONGO_URI}" \
            --build-arg PORT="${PORT}" \
            --build-arg JWT_SECRET="${JWT_SECRET}" \
            --build-arg NODE_ENV="${NODE_ENV}" \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT