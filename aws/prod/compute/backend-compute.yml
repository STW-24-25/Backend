AWSTemplateFormatVersion: '2010-09-09'
Description: 'Configuración de recursos de cómputo para Backend con Auto Scaling - AgroNet 2025'

Parameters:
  EnvironmentName:
    Description: Nombre del entorno
    Type: String
    Default: prod

  BackendInstanceType:
    Description: Tipo de instancia EC2 para Backend
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large

  KeyName:
    Description: Nombre del Key Pair de EC2 para acceso SSH
    Type: AWS::EC2::KeyPair::KeyName

  LatestAmiId:
    Description: AMI para instancias de Backend
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64

  MongoDBConnectionString:
    Description: Connection string para MongoDB Atlas
    Type: String
    Default: "mongodb+srv://server:CNEj8ZBi99e3zJst@agronetcluster.sk9pr.mongodb.net/?retryWrites=true&w=majority&appName=AgroNETCluster"
    NoEcho: true

  GitHubToken:
    Description: GitHub fine-grained personal access token para acceder a repositorios
    Type: String
    Default: "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"
    NoEcho: true
    
  JWTSecret:
    Description: Secret para firmar los tokens JWT
    Type: String
    Default: "4e992bee8411b55f320502fd271c2a69c194a6e5dd50e90109c28bf0d78e1ba6be23453dbff226f37ff040918e604608b49ea4d15b239aa28239ecda5a4ca61d432dfbce0a7948b41f5c7818fab69550f96d0251d2c515af64c07b96229a3c68a3a33cc7f63bf80bc042858ff6448137323e1b53325579ff5873344915b830278e39938634998eafd2cdd605a8994aa56dfc04ea014cd88d8a64d2bd0e076bfd5e1470fe4ad91192690dde8c37b032d78b52569a2093821b5fde7e9ecea6e8333b200f16cc461fccc850853fcaefa3c0bded4286351a31194af9e6a56b8015c6cb8ac44d36b21b3cf28a3116622f872a9dea540083377646c795ad2ec011da5a"
    NoEcho: true

  AWSAccessKeyId:
    Description: Access Key ID para AWS
    Type: String
    Default: "AKIA33FMH3JPRUIB4URW"
    NoEcho: true

  AWSSecretAccessKey:
    Description: Secret Access Key para AWS
    Type: String
    Default: "EHbrAZxu1XwvzSy+h4Y3WuvEG3vp59f/gl7Iweb/"
    NoEcho: true

  AWSRegion:
    Description: Región de AWS
    Type: String
    Default: "eu-north-1"

  S3BucketName:
    Description: Nombre del bucket S3 para almacenar imágenes
    Type: String
    Default: "agronet-images"

  NotificationLambdaName:
    Description: Nombre de la función Lambda para notificaciones
    Type: String
    Default: "AgroAlertNotificationsHandler"

  SNSTopicARN:
    Description: ARN del tema SNS para notificaciones
    Type: String
    Default: "arn:aws:sns:eu-north-1:814257527391:AgroNETAlertNotifications"

  ScaleOutThreshold:
    Description: Umbral de CPU para escalar hacia fuera (%)
    Type: Number
    Default: 70
    MinValue: 1
    MaxValue: 100

  ScaleInThreshold:
    Description: Umbral de CPU para escalar hacia dentro (%)
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 100

  ScaleOutCooldown:
    Description: Tiempo de espera para escalar hacia fuera (segundos)
    Type: Number
    Default: 300

  ScaleInCooldown:
    Description: Tiempo de espera para escalar hacia dentro (segundos)
    Type: Number
    Default: 300

  MinSize:
    Description: Número mínimo de instancias en Auto Scaling Group
    Type: Number
    Default: 1
    MinValue: 1

  MaxSize:
    Description: Número máximo de instancias en Auto Scaling Group
    Type: Number
    Default: 3
    MinValue: 1

  DesiredCapacity:
    Description: Capacidad deseada para cada Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1

Resources:
  # IAM Role para permitir a las instancias obtener acceso a S3, DynamoDB, etc
  BackendInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-backend-instance-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                  - sns:Publish
                  - lambda:InvokeFunction
                Resource: '*'

  BackendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref BackendInstanceRole

  # Secret para almacenar el token de GitHub (si no existe ya)
  GitHubTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${EnvironmentName}-github-token"
      Description: GitHub fine-grained personal access token
      SecretString: !Ref GitHubToken

  # CloudWatch Agent Configuration
  CloudWatchAgentConfig:
    Type: AWS::SSM::Parameter
    Properties:
      Name: !Sub "/${EnvironmentName}/backend/cloudwatch-agent-config"
      Type: String
      Value: !Sub |
        {
          "agent": {
            "metrics_collection_interval": 60,
            "run_as_user": "root"
          },
          "metrics": {
            "append_dimensions": {
              "InstanceId": "${!aws:InstanceId}",
              "InstanceType": "${!aws:InstanceType}",
              "AutoScalingGroupName": "${!aws:AutoScalingGroupName}"
            },
            "metrics_collected": {
              "cpu": {
                "measurement": [
                  "cpu_usage_idle",
                  "cpu_usage_iowait",
                  "cpu_usage_user",
                  "cpu_usage_system"
                ],
                "metrics_collection_interval": 60,
                "totalcpu": true
              },
              "disk": {
                "measurement": [
                  "used_percent",
                  "inodes_free"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "diskio": {
                "measurement": [
                  "io_time"
                ],
                "metrics_collection_interval": 60,
                "resources": [
                  "*"
                ]
              },
              "mem": {
                "measurement": [
                  "mem_used_percent"
                ],
                "metrics_collection_interval": 60
              },
              "swap": {
                "measurement": [
                  "swap_used_percent"
                ],
                "metrics_collection_interval": 60
              }
            }
          }
        }

  # Launch Templates para Backend
  BackendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-backend-launch-template
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref BackendInstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !ImportValue 
            Fn::Sub: "${EnvironmentName}-Backend-Instance-SecurityGroup"
        IamInstanceProfile:
          Name: !Ref BackendInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            
            # Esperar a que la red esté completamente configurada
            sleep 30
            
            # Configurar DNS explícitamente para mejorar la resolución
            echo "nameserver 8.8.8.8" >> /etc/resolv.conf
            echo "nameserver 1.1.1.1" >> /etc/resolv.conf
            
            # Verificar conectividad antes de continuar
            echo "Verificando conectividad a Internet..."
            ping -c 3 google.com || {
                echo "Sin conectividad a Internet. Esperando 60 segundos más..."
                sleep 60
            }
            
            # Configuración para Amazon Linux 2023
            # Esperar a tener conexión con los repositorios antes de continuar
            attempts=0
            max_attempts=5
            
            # Limpiar caché de DNF y actualizar
            dnf clean all
            dnf makecache --refresh
            
            until dnf list installed &> /dev/null || [ $attempts -eq $max_attempts ]
            do
              echo "Intento $((attempts+1))/$max_attempts para conectar con repositorios..."
              sleep 10
              attempts=$((attempts+1))
            done
            
            if [ $attempts -eq $max_attempts ]; then
              echo "No se pudo conectar con los repositorios. Continuando con la instalación sin actualizar."
            else
              dnf update -y
            fi
            
            # Instalar dependencias necesarias
            dnf install -y git nodejs npm jq aws-cli wget libcap


            # Instalar PM2 globalmente para gestionar el proceso
            npm install -g pm2

            # Instalar el agente de CloudWatch
            wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            rpm -U amazon-cloudwatch-agent.rpm
            
            # Configurar el agente de CloudWatch desde SSM Parameter Store
            aws ssm get-parameter --name "/${EnvironmentName}/backend/cloudwatch-agent-config" --region ${AWS::Region} --query "Parameter.Value" --output text > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
            
            # Iniciar el agente de CloudWatch
            /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

            # Obtener el token de GitHub desde Secrets Manager
            GITHUB_TOKEN=$(aws secretsmanager get-secret-value \
              --secret-id ${EnvironmentName}-github-token \
              --region ${AWS::Region} \
              --query SecretString --output text)

            # Configurar credenciales de Git para clonar repositorio
            echo "Configurando credenciales de Git..."
            export HOME=/home/ec2-user
            git config --global credential.helper store
            echo "https://oauth2:$GITHUB_TOKEN@github.com" > /home/ec2-user/.git-credentials
            chown ec2-user:ec2-user /home/ec2-user/.git-credentials
            chmod 600 /home/ec2-user/.git-credentials

            # Instalar dependencias y configurar
            cd /home/ec2-user
            echo "Clonando repositorio con token..."
            # Usar autenticación con token para clonar el repositorio
            sudo -u ec2-user git clone https://oauth2:$GITHUB_TOKEN@github.com/STW-24-25/Backend.git
            cd Backend
            sudo -u ec2-user npm install
            
            # Instalar la dependencia faltante @turf/jsts
            sudo -u ec2-user npm install @turf/jsts --save

            # Configurar variables de entorno
            cat > .env << EOL
            PORT=3000
            NODE_ENV=production
            MONGO_URI=${MongoDBConnectionString}
            JWT_SECRET=${JWTSecret}
            AEMET_API_KEY=eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI4NDg0ODFAdW5pemFyLmVzIiwianRpIjoiNDZlNGNhOGYtYzVhNy00NmJhLWEzOWMtNDg2ZTljZTNmYWQ2IiwiaXNzIjoiQUVNRVQiLCJpYXQiOjE3NDc5MzEzNDQsInVzZXJJZCI6IjQ2ZTRjYThmLWM1YTctNDZiYS1hMzljLTQ4NmU5Y2UzZmFkNiIsInJvbGUiOiIifQ.v9Ykdkpos5nT7DH8llwFKDbvhj6LXORWdaxiELdAE38
            AWS_ACCESS_KEY_ID=${AWSAccessKeyId}
            GITHUB_CLIENT_ID=Ov23li06FyN9SNC9OaZX
            GITHUB_CLIENT_SECRET=48471cf2359e68ab6e2f33d404b7412298f5ec72
            GOOGLE_CLIENT_ID=451497636244-bsd2hdr98f0te5su1hoiloneh18kkep0.apps.googleusercontent.com
            GOOGLE_CLIENT_SECRET=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
            AWS_SECRET_ACCESS_KEY=${AWSSecretAccessKey}
            AWS_REGION=${AWSRegion}
            S3_BUCKET_NAME=${S3BucketName}
            NOTIFICATION_LAMBDA_FUNCTION_NAME=${NotificationLambdaName}
            SNS_TOPIC_ARN=${SNSTopicARN}
            EOL
           
            # Configurar AWS SDK para usar el endpoint VPC de S3 de forma transparente mediante variables de entorno del sistema
            cat >> /etc/environment << EOL
            AWS_SDK_LOAD_CONFIG=1
            AWS_CONFIG_FILE=/home/ec2-user/.aws/config
            EOL

            # Configurar el archivo de configuración de AWS para el uso de endpoints VPC
            mkdir -p /home/ec2-user/.aws
            cat > /home/ec2-user/.aws/config << EOL
            [default]
            region = ${AWSRegion}
            s3 = 
                use_accelerate_endpoint = false
                addressing_style = virtual
                use_dualstack_endpoint = false
            
            [plugins]
            endpoint = endpoint-data

            [services]
            s3 = 
                endpoints = 
                    *=https://s3.${AWSRegion}.amazonaws.com
            EOL

            chown -R ec2-user:ec2-user /home/ec2-user/.aws
            chmod 700 /home/ec2-user/.aws
            chmod 600 /home/ec2-user/.aws/config

            # Recargar variables de entorno
            source /etc/environment

            # Construir la aplicación
            sudo -u ec2-user npm run build
            
            # Crear configuración de PM2
            cat > ecosystem.config.js << 'EOL'
            module.exports = {
              apps: [{
                name: 'backend',
                script: 'npm',
                args: 'run start',
                env: {
                  HOST: '0.0.0.0',
                  PORT: 3000,
                  NODE_OPTIONS: '--dns-result-order=ipv4first --no-warnings',
                  UV_THREADPOOL_SIZE: 128,
                  UV_USE_IPV6: 0
                }
              }]
            }
            EOL
            
            # Iniciar con PM2 como usuario ec2-user
            sudo -u ec2-user pm2 start ecosystem.config.js
            
            # Configurar PM2 para iniciar con el sistema
            pm2 startup -u ec2-user
            env PATH=$PATH:/usr/bin pm2 startup systemd -u ec2-user --hp /home/ec2-user
            sudo -u ec2-user pm2 save
            
            # Crear un script para ver los logs fácilmente
            cat > /usr/local/bin/check-logs << 'EOL'
              #!/bin/bash
              # Script para facilitar la revisión de logs
              echo "===== PM2 Status ====="
              su - ec2-user -c "pm2 status"
              echo ""
              echo "===== Backend Logs ====="
              echo "Últimas 50 líneas del log de salida:"
              tail -n 50 /home/ec2-user/.pm2/logs/backend-out.log
              echo ""
              echo "Últimas 50 líneas del log de error:"
              tail -n 50 /home/ec2-user/.pm2/logs/backend-error.log
            EOL
            chmod +x /usr/local/bin/check-logs
            
            # Limpiar credenciales después del despliegue
            rm /home/ec2-user/.git-credentials
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-Backend-Instance
              - Key: Environment
                Value: !Ref EnvironmentName

  # Auto Scaling Groups para Backend en diferentes zonas
  BackendASG1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Backend-ASG-1
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Backend-Private-Subnet-1-ID"
      TargetGroupARNs:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Backend-TG1-ARN"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Backend-ASG-1
          PropagateAtLaunch: true

  BackendASG2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Backend-ASG-2
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Backend-Private-Subnet-2-ID"
      TargetGroupARNs:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Backend-TG2-ARN"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Backend-ASG-2
          PropagateAtLaunch: true

  BackendASG3:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Backend-ASG-3
      LaunchTemplate:
        LaunchTemplateId: !Ref BackendLaunchTemplate
        Version: !GetAtt BackendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Backend-Private-Subnet-3-ID"
      TargetGroupARNs:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Backend-TG3-ARN"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Backend-ASG-3
          PropagateAtLaunch: true

  # Alarmas de CloudWatch para monitorizar CPU - Scale Out (Alto uso)
  HighCPUAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Backend-ASG1-HighCPU"
      AlarmDescription: "Alarma por alto uso de CPU en Backend ASG1"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleOutThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendASG1
      AlarmActions:
        - !Ref BackendScaleOutPolicy1

  HighCPUAlarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Backend-ASG2-HighCPU"
      AlarmDescription: "Alarma por alto uso de CPU en Backend ASG2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleOutThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendASG2
      AlarmActions:
        - !Ref BackendScaleOutPolicy2

  HighCPUAlarm3:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Backend-ASG3-HighCPU"
      AlarmDescription: "Alarma por alto uso de CPU en Backend ASG3"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleOutThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendASG3
      AlarmActions:
        - !Ref BackendScaleOutPolicy3

  # Alarmas de CloudWatch para monitorizar CPU - Scale In (Bajo uso)
  LowCPUAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Backend-ASG1-LowCPU"
      AlarmDescription: "Alarma por bajo uso de CPU en Backend ASG1"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleInThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendASG1
      AlarmActions:
        - !Ref BackendScaleInPolicy1

  LowCPUAlarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Backend-ASG2-LowCPU"
      AlarmDescription: "Alarma por bajo uso de CPU en Backend ASG2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleInThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendASG2
      AlarmActions:
        - !Ref BackendScaleInPolicy2

  LowCPUAlarm3:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Backend-ASG3-LowCPU"
      AlarmDescription: "Alarma por bajo uso de CPU en Backend ASG3"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleInThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref BackendASG3
      AlarmActions:
        - !Ref BackendScaleInPolicy3

  # Políticas de Scale Out
  BackendScaleOutPolicy1:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendASG1
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: !Ref ScaleOutCooldown

  BackendScaleOutPolicy2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendASG2
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: !Ref ScaleOutCooldown

  BackendScaleOutPolicy3:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendASG3
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: !Ref ScaleOutCooldown

  # Políticas de Scale In
  BackendScaleInPolicy1:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendASG1
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: !Ref ScaleInCooldown

  BackendScaleInPolicy2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendASG2
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: !Ref ScaleInCooldown

  BackendScaleInPolicy3:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref BackendASG3
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: !Ref ScaleInCooldown

Outputs:
  BackendLaunchTemplateId:
    Description: ID de la Launch Template del Backend
    Value: !Ref BackendLaunchTemplate
    Export:
      Name: !Sub "${EnvironmentName}-Backend-LaunchTemplate-ID"

  BackendASG1Name:
    Description: Nombre del ASG 1 de Backend
    Value: !Ref BackendASG1
    Export:
      Name: !Sub "${EnvironmentName}-Backend-ASG1-Name"

  BackendASG2Name:
    Description: Nombre del ASG 2 de Backend
    Value: !Ref BackendASG2
    Export:
      Name: !Sub "${EnvironmentName}-Backend-ASG2-Name"

  BackendASG3Name:
    Description: Nombre del ASG 3 de Backend
    Value: !Ref BackendASG3
    Export:
      Name: !Sub "${EnvironmentName}-Backend-ASG3-Name"
      
  GitHubTokenSecretArn:
    Description: ARN del secreto que almacena el token de GitHub
    Value: !Ref GitHubTokenSecret
    Export:
      Name: !Sub "${EnvironmentName}-GitHub-Token-Secret-ARN" 