AWSTemplateFormatVersion: '2010-09-09'
Description: 'Configuración de recursos de cómputo para Frontend con Auto Scaling - AgroNet 2025'

Parameters:
  EnvironmentName:
    Description: Nombre del entorno
    Type: String
    Default: prod

  FrontendInstanceType:
    Description: Tipo de instancia EC2 para Frontend
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large

  KeyName:
    Description: Nombre del Key Pair de EC2 para acceso SSH
    Type: AWS::EC2::KeyPair::KeyName

  LatestAmiId:
    Description: AMI para instancias de Frontend (Amazon Linux 2023)
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    
  GitHubToken:
    Description: GitHub fine-grained personal access token para acceder a repositorios
    Type: String
    Default: "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"
    NoEcho: true

  AWSAccessKeyId:
    Description: Access Key ID para AWS
    Type: String
    Default: "AKIA33FMH3JPRUIB4URW"
    NoEcho: true

  AWSSecretAccessKey:
    Description: Secret Access Key para AWS
    Type: String
    Default: "EHbrAZxu1XwvzSy+h4Y3WuvEG3vp59f/gl7Iweb/"
    NoEcho: true

  AWSRegion:
    Description: Región de AWS
    Type: String
    Default: "eu-north-1"

  S3BucketName:
    Description: Nombre del bucket S3 para almacenar imágenes
    Type: String
    Default: "agronet-images"

  ScaleOutThreshold:
    Description: Umbral de CPU para escalar hacia fuera (%)
    Type: Number
    Default: 70
    MinValue: 1
    MaxValue: 100

  ScaleInThreshold:
    Description: Umbral de CPU para escalar hacia dentro (%)
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 100

  ScaleOutCooldown:
    Description: Tiempo de espera para escalar hacia fuera (segundos)
    Type: Number
    Default: 300

  ScaleInCooldown:
    Description: Tiempo de espera para escalar hacia dentro (segundos)
    Type: Number
    Default: 300

  MinSize:
    Description: Número mínimo de instancias en Auto Scaling Group
    Type: Number
    Default: 1
    MinValue: 1

  MaxSize:
    Description: Número máximo de instancias en Auto Scaling Group
    Type: Number
    Default: 3
    MinValue: 1

  DesiredCapacity:
    Description: Capacidad deseada para cada Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1

Resources:
  # IAM Role para permitir a las instancias obtener acceso a S3/ECR
  FrontendInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-frontend-instance-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                Resource: '*'

  FrontendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref FrontendInstanceRole

  # Launch Template para Frontend
  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-frontend-launch-template
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref FrontendInstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !ImportValue 
            Fn::Sub: "${EnvironmentName}-Frontend-Instance-SecurityGroup"
        IamInstanceProfile:
          Name: !Ref FrontendInstanceProfile
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash -xe
            # Configuración para Amazon Linux 2023
            # Esperar a tener conexión con los repositorios antes de continuar
            attempts=0
            max_attempts=5
            
            until dnf list installed &> /dev/null || [ $attempts -eq $max_attempts ]
            do
              echo "Intento $((attempts+1))/$max_attempts para conectar con repositorios..."
              sleep 10
              attempts=$((attempts+1))
            done
            
            if [ $attempts -eq $max_attempts ]; then
              echo "No se pudo conectar con los repositorios. Continuando con la instalación sin actualizar."
            else
              dnf update -y
            fi
            
            # Instalar dependencias necesarias
            dnf install -y git nodejs npm jq aws-cli

            # Configuración de seguridad - Establecer permisos restrictivos para directorios/archivos sensibles
            mkdir -p /etc/frontend-secure
            chmod 700 /etc/frontend-secure
            
            # Obtener el token de GitHub desde Secrets Manager de forma segura
            GITHUB_TOKEN=$(aws secretsmanager get-secret-value \
              --secret-id ${EnvironmentName}-github-token \
              --region ${AWS::Region} \
              --query SecretString --output text)

            # Almacenar token en ubicación segura temporalmente
            echo "$GITHUB_TOKEN" > /etc/frontend-secure/github_token
            chmod 600 /etc/frontend-secure/github_token
            
            # Crear usuario específico para la aplicación con privilegios limitados
            useradd -m -s /bin/bash frontend-app
            
            # Configurar credenciales de Git de forma segura
            echo "Configurando credenciales de Git..."
            export HOME=/home/frontend-app
            git config --global --add safe.directory /home/frontend-app/Frontend
            git config --global credential.helper store
            
            # Usar el token de forma segura
            echo "https://oauth2:$(cat /etc/frontend-secure/github_token)@github.com" > /home/frontend-app/.git-credentials
            chown frontend-app:frontend-app /home/frontend-app/.git-credentials
            chmod 600 /home/frontend-app/.git-credentials

            # Clonar e instalar la aplicación
            cd /home/frontend-app
            echo "Clonando repositorio con token..."
            sudo -u frontend-app git clone https://oauth2:$(cat /etc/frontend-secure/github_token)@github.com/STW-24-25/Frontend.git
            cd Frontend
            
            # Identificar la zona de disponibilidad en la que está la instancia
            INSTANCE_AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
            AZ_ID=$(echo $INSTANCE_AZ | sed 's/.*\(.\)$/\1/')
            
            # Seleccionar el NLB apropiado según la AZ
            if [ "$AZ_ID" == "1" ] || [ "$AZ_ID" == "a" ]; then
              NLB_DNS=$(aws ssm get-parameter --name /${EnvironmentName}/network/nlb1-dns --region ${AWS::Region} --query "Parameter.Value" --output text)
            elif [ "$AZ_ID" == "2" ] || [ "$AZ_ID" == "b" ]; then
              NLB_DNS=$(aws ssm get-parameter --name /${EnvironmentName}/network/nlb2-dns --region ${AWS::Region} --query "Parameter.Value" --output text)
            else
              NLB_DNS=$(aws ssm get-parameter --name /${EnvironmentName}/network/nlb3-dns --region ${AWS::Region} --query "Parameter.Value" --output text)
            fi
            
            # Almacenar credenciales AWS de forma segura
            echo "${AWSAccessKeyId}" > /etc/frontend-secure/aws_access_key
            echo "${AWSSecretAccessKey}" > /etc/frontend-secure/aws_secret_key
            chmod 600 /etc/frontend-secure/aws_*
            
            # Crear archivo .env con credenciales referenciadas de forma segura
            cat > /home/frontend-app/Frontend/.env << EOL
            API_URL=http://$NLB_DNS:3000/api
            PORT=4321
            HOST=0.0.0.0
            AWS_ACCESS_KEY_ID=$(cat /etc/frontend-secure/aws_access_key)
            AWS_SECRET_ACCESS_KEY=$(cat /etc/frontend-secure/aws_secret_key)
            AWS_REGION=${AWSRegion}
            S3_BUCKET_NAME=${S3BucketName}
            EOL
            
            # Asignar permisos adecuados al archivo .env
            chown frontend-app:frontend-app /home/frontend-app/Frontend/.env
            chmod 600 /home/frontend-app/Frontend/.env
            
            # Configurar AWS SDK para usar el endpoint VPC de S3 de forma transparente
            mkdir -p /home/frontend-app/.aws
            cat > /home/frontend-app/.aws/config << EOL
            [default]
            region = ${AWSRegion}
            s3 = 
                use_accelerate_endpoint = false
                addressing_style = virtual
                use_dualstack_endpoint = false
            
            [plugins]
            endpoint = endpoint-data

            [services]
            s3 = 
                endpoints = 
                    *=https://s3.${AWSRegion}.amazonaws.com
            EOL
            
            chown -R frontend-app:frontend-app /home/frontend-app/.aws
            chmod 700 /home/frontend-app/.aws
            chmod 600 /home/frontend-app/.aws/config
            
            # Variables de entorno para AWS SDK
            cat > /etc/environment << EOL
            AWS_SDK_LOAD_CONFIG=1
            AWS_CONFIG_FILE=/home/frontend-app/.aws/config
            EOL
            
            # Recargar variables de entorno
            source /etc/environment
            
            # Instalar dependencias y construir la aplicación
            chown -R frontend-app:frontend-app /home/frontend-app/Frontend
            cd /home/frontend-app/Frontend
            sudo -u frontend-app npm install
            sudo -u frontend-app npm run build
            
            # Configurar un servicio systemd para que node ejecute directamente Astro
            cat > /etc/systemd/system/astro-frontend.service << 'EOL'
            [Unit]
            Description=AgroNet Astro Frontend
            After=network.target

            [Service]
            Type=simple
            User=frontend-app
            WorkingDirectory=/home/frontend-app/Frontend
            Environment="HOST=0.0.0.0"
            Environment="PORT=4321"
            Environment="NODE_OPTIONS=--dns-result-order=ipv4first --no-warnings"
            ExecStart=/usr/bin/node ./dist/server/entry.mjs
            Restart=always
            RestartSec=10
            # Limitar acceso a recursos del sistema
            MemoryLimit=512M
            CPUQuota=80%
            # Seguridad adicional
            NoNewPrivileges=true
            ProtectSystem=full
            ProtectHome=read-only
            ReadWriteDirectories=/home/frontend-app/Frontend
            PrivateTmp=true

            [Install]
            WantedBy=multi-user.target
            EOL
            
            # Activar y iniciar el servicio
            systemctl daemon-reload
            systemctl enable astro-frontend
            systemctl start astro-frontend
            
            # Crear un script para verificar logs y estado con permisos adecuados
            cat > /usr/local/bin/check-astro << 'EOL'
            #!/bin/bash
            # Script para facilitar la revisión de logs
            echo "===== Astro Frontend Status ====="
            systemctl status astro-frontend
            echo ""
            echo "===== Astro Frontend Logs ====="
            journalctl -u astro-frontend -n 50
            EOL
            chmod 755 /usr/local/bin/check-astro
            
            # Limpiar credenciales después del despliegue
            rm /home/frontend-app/.git-credentials
            rm -rf /etc/frontend-secure
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-Frontend-Instance
              - Key: Environment
                Value: !Ref EnvironmentName

  # Crear 3 ASG, uno para cada zona de disponibilidad
  FrontendASG1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Frontend-ASG-1
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-Public-Subnet-1-ID"
      TargetGroupARNs:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-TG-ARN"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Frontend-ASG-1
          PropagateAtLaunch: true

  FrontendASG2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Frontend-ASG-2
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-Public-Subnet-2-ID"
      TargetGroupARNs:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-TG-ARN"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Frontend-ASG-2
          PropagateAtLaunch: true

  FrontendASG3:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Frontend-ASG-3
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-Public-Subnet-3-ID"
      TargetGroupARNs:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-TG-ARN"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Frontend-ASG-3
          PropagateAtLaunch: true

  # Alarmas y políticas de Auto Scaling - Scale Out (Alto uso)
  HighCPUAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG1-HighCPU"
      AlarmDescription: "Alarma por alto uso de CPU en Frontend ASG1"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleOutThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG1
      AlarmActions:
        - !Ref FrontendScaleOutPolicy1

  HighCPUAlarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG2-HighCPU"
      AlarmDescription: "Alarma por alto uso de CPU en Frontend ASG2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleOutThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG2
      AlarmActions:
        - !Ref FrontendScaleOutPolicy2

  HighCPUAlarm3:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG3-HighCPU"
      AlarmDescription: "Alarma por alto uso de CPU en Frontend ASG3"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleOutThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG3
      AlarmActions:
        - !Ref FrontendScaleOutPolicy3

  # Alarmas de CloudWatch para monitorizar CPU - Scale In (Bajo uso)
  LowCPUAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG1-LowCPU"
      AlarmDescription: "Alarma por bajo uso de CPU en Frontend ASG1"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleInThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG1
      AlarmActions:
        - !Ref FrontendScaleInPolicy1

  LowCPUAlarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG2-LowCPU"
      AlarmDescription: "Alarma por bajo uso de CPU en Frontend ASG2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleInThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG2
      AlarmActions:
        - !Ref FrontendScaleInPolicy2

  LowCPUAlarm3:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG3-LowCPU"
      AlarmDescription: "Alarma por bajo uso de CPU en Frontend ASG3"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleInThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG3
      AlarmActions:
        - !Ref FrontendScaleInPolicy3

  # Políticas de Scale Out
  FrontendScaleOutPolicy1:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG1
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: !Ref ScaleOutCooldown

  FrontendScaleOutPolicy2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG2
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: !Ref ScaleOutCooldown

  FrontendScaleOutPolicy3:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG3
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: !Ref ScaleOutCooldown

  # Políticas de Scale In
  FrontendScaleInPolicy1:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG1
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: !Ref ScaleInCooldown

  FrontendScaleInPolicy2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG2
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: !Ref ScaleInCooldown

  FrontendScaleInPolicy3:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG3
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: !Ref ScaleInCooldown

Outputs:
  FrontendLaunchTemplateId:
    Description: ID de la Launch Template del Frontend
    Value: !Ref FrontendLaunchTemplate
    Export:
      Name: !Sub "${EnvironmentName}-Frontend-LaunchTemplate-ID"

  FrontendASG1Name:
    Description: Nombre del ASG 1 de Frontend
    Value: !Ref FrontendASG1
    Export:
      Name: !Sub "${EnvironmentName}-Frontend-ASG1-Name"

  FrontendASG2Name:
    Description: Nombre del ASG 2 de Frontend
    Value: !Ref FrontendASG2
    Export:
      Name: !Sub "${EnvironmentName}-Frontend-ASG2-Name"

  FrontendASG3Name:
    Description: Nombre del ASG 3 de Frontend
    Value: !Ref FrontendASG3
    Export:
      Name: !Sub "${EnvironmentName}-Frontend-ASG3-Name" 