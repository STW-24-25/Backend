AWSTemplateFormatVersion: '2010-09-09'
Description: 'Configuración de recursos de cómputo para Frontend con Auto Scaling - AgroNet 2025'

Parameters:
  EnvironmentName:
    Description: Nombre del entorno
    Type: String
    Default: prod

  FrontendInstanceType:
    Description: Tipo de instancia EC2 para Frontend
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large

  KeyName:
    Description: Nombre del Key Pair de EC2 para acceso SSH
    Type: AWS::EC2::KeyPair::KeyName

  LatestAmiId:
    Description: AMI para instancias de Frontend (Amazon Linux 2023)
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64
    
  GitHubToken:
    Description: GitHub personal access token para acceder a repositorios
    Type: String
    Default: "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"
    NoEcho: true

  AWSAccessKeyId:
    Description: Access Key ID para AWS
    Type: String
    Default: "AKIA33FMH3JPRUIB4URW"
    NoEcho: true

  AWSSecretAccessKey:
    Description: Secret Access Key para AWS
    Type: String
    Default: "EHbrAZxu1XwvzSy+h4Y3WuvEG3vp59f/gl7Iweb/"
    NoEcho: true

  AWSRegion:
    Description: Región de AWS
    Type: String
    Default: "eu-north-1"

  S3BucketName:
    Description: Nombre del bucket S3 para almacenar imágenes
    Type: String
    Default: "agronet-images"

  ScaleOutThreshold:
    Description: Umbral de CPU para escalar hacia fuera (%)
    Type: Number
    Default: 70
    MinValue: 1
    MaxValue: 100

  ScaleInThreshold:
    Description: Umbral de CPU para escalar hacia dentro (%)
    Type: Number
    Default: 30
    MinValue: 1
    MaxValue: 100

  ScaleOutCooldown:
    Description: Tiempo de espera para escalar hacia fuera (segundos)
    Type: Number
    Default: 300

  ScaleInCooldown:
    Description: Tiempo de espera para escalar hacia dentro (segundos)
    Type: Number
    Default: 300

  MinSize:
    Description: Número mínimo de instancias en Auto Scaling Group
    Type: Number
    Default: 1
    MinValue: 1

  MaxSize:
    Description: Número máximo de instancias en Auto Scaling Group
    Type: Number
    Default: 3
    MinValue: 1

  DesiredCapacity:
    Description: Capacidad deseada para cada Auto Scaling Group
    Type: Number
    Default: 2
    MinValue: 1

Resources:
  # IAM Role para permitir a las instancias obtener acceso a S3/ECR
  FrontendInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      Policies:
        - PolicyName: !Sub ${EnvironmentName}-frontend-instance-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - secretsmanager:GetSecretValue
                  - ssm:GetParameter
                  - ssm:GetParameters
                  - ssm:GetParametersByPath
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:DescribeTargetGroups
                  - elasticloadbalancing:DescribeTargetHealth
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - route53:ListHostedZones
                  - route53:GetChange
                  - route53:ChangeResourceRecordSets
                  - route53:ListResourceRecordSets
                Resource: '*'

  FrontendInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref FrontendInstanceRole

  # Launch Template para Frontend
  FrontendLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: !Sub ${EnvironmentName}-frontend-launch-template
      VersionDescription: Initial version
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref FrontendInstanceType
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !ImportValue 
            Fn::Sub: "${EnvironmentName}-Frontend-Instance-SecurityGroup"
        IamInstanceProfile:
          Name: !Ref FrontendInstanceProfile
        UserData:
          Fn::Base64: 
            !Sub |
              #!/bin/bash -xe
              
              # Preparar script de configuración
              cat > /tmp/setup.sh << 'EOFSCRIPT'
              #!/bin/bash -xe
              
              # Obtener parámetros desde archivos
              GITHUB_TOKEN=$(cat /tmp/github_token)
              AWS_ACCESS_KEY=$(cat /tmp/aws_access_key)
              AWS_SECRET_KEY=$(cat /tmp/aws_secret_key)
              AWS_REGION=$(cat /tmp/aws_region)
              S3_BUCKET=$(cat /tmp/s3_bucket)
              ENVIRONMENT_NAME=$(cat /tmp/environment_name)
              
              # Instalar dependencias
              dnf update -y
              dnf install -y nodejs npm certbot aws-cli jq git gcc-c++ make python3-devel python3-pip cronie
              pip3 install --ignore-installed certbot-dns-route53
              
              # Configurar AWS
              mkdir -p /root/.aws
              cat > /root/.aws/credentials << EOL
              [default]
              aws_access_key_id = $AWS_ACCESS_KEY
              aws_secret_access_key = $AWS_SECRET_KEY
              region = $AWS_REGION
              EOL
              chmod 600 /root/.aws/credentials
              
              # Configurar git y clonar repositorio
              cd /home/ec2-user
              sudo -u ec2-user git config --global credential.helper store
              
              echo "https://$GITHUB_TOKEN:x-oauth-basic@github.com" > /home/ec2-user/.git-credentials
              chown ec2-user:ec2-user /home/ec2-user/.git-credentials
              chmod 600 /home/ec2-user/.git-credentials
              
              sudo -u ec2-user git clone https://$GITHUB_TOKEN:x-oauth-basic@github.com/STW-24-25/Frontend.git
              
              # Obtener NLB DNS
              INSTANCE_AZ=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone)
              AZ_ID=$(echo $INSTANCE_AZ | sed 's/.*\(.\)$/\1/')
              
              if [ "$AZ_ID" == "1" ] || [ "$AZ_ID" == "a" ]; then
                NLB_DNS=$(aws cloudformation describe-stacks --stack-name "${EnvironmentName}-network-stack" --region $AWS_REGION --query "Stacks[0].Outputs[?ExportName=='${EnvironmentName}-NLB1-DNS'].OutputValue" --output text)
              elif [ "$AZ_ID" == "2" ] || [ "$AZ_ID" == "b" ]; then
                NLB_DNS=$(aws cloudformation describe-stacks --stack-name "${EnvironmentName}-network-stack" --region $AWS_REGION --query "Stacks[0].Outputs[?ExportName=='${EnvironmentName}-NLB2-DNS'].OutputValue" --output text)
              else
                NLB_DNS=$(aws cloudformation describe-stacks --stack-name "${EnvironmentName}-network-stack" --region $AWS_REGION --query "Stacks[0].Outputs[?ExportName=='${EnvironmentName}-NLB3-DNS'].OutputValue" --output text)
              fi
              
              # Comprobar si se obtuvo el DNS correctamente, si no, intentar con los parámetros SSM como fallback
              if [ -z "$NLB_DNS" ]; then
                echo "No se pudo obtener el DNS del NLB mediante CloudFormation exports, intentando con SSM..."
                if [ "$AZ_ID" == "1" ] || [ "$AZ_ID" == "a" ]; then
                  NLB_DNS=$(aws ssm get-parameter --name /${EnvironmentName}/network/nlb1-dns --region $AWS_REGION --query "Parameter.Value" --output text)
                elif [ "$AZ_ID" == "2" ] || [ "$AZ_ID" == "b" ]; then
                  NLB_DNS=$(aws ssm get-parameter --name /${EnvironmentName}/network/nlb2-dns --region $AWS_REGION --query "Parameter.Value" --output text)
                else
                  NLB_DNS=$(aws ssm get-parameter --name /${EnvironmentName}/network/nlb3-dns --region $AWS_REGION --query "Parameter.Value" --output text)
                fi
              fi
              
              # Configurar .env
              cat > /home/ec2-user/Frontend/.env << EOL
              API_URL=http://$NLB_DNS:3000/api/
              PUBLIC_API_URL=http://$NLB_DNS:3000/api/
              PORT=4321
              HOST=0.0.0.0
              SITE_URL=https://www.agronet.are-dev.es
              PUBLIC_SITE_URL=https://www.agronet.are-dev.es
              ALLOW_DIRECT_IP_ACCESS=true
              INSTANCE_ID=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
              INSTANCE_IP=$(curl -s http://169.254.169.254/latest/meta-data/local-ipv4)
              AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY
              AWS_SECRET_ACCESS_KEY=$AWS_SECRET_KEY
              AWS_REGION=$AWS_REGION
              S3_BUCKET_NAME=$S3_BUCKET
              AUTH_SECRET="348df432d0c9952fbfe0c0373a8f06cc"
              AUTH_TRUST_HOST=true
              GITHUB_CLIENT_ID="Ov23linoU2XJT4muQVfZ"
              GITHUB_CLIENT_SECRET="6c1f454d7a0a1f81d542ba631be39cd3e96bfed1"
              GOOGLE_CLIENT_ID="451497636244-bsd2hdr98f0te5su1hoiloneh18kkep0.apps.googleusercontent.com"
              GOOGLE_CLIENT_SECRET="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"
              RECAPTCHA_SITE="6LcVlUMrAAAAACmcKMjwDVRMw_mX1Fh2mSwk6yxd"
              RECAPTCHA_SECRET="6LcVlUMrAAAAAO_GPP2MMy7pFK7fqHf968ZGiQN4"
              DEV_MODE=true
              DEV_SKIP_OAUTH=true
              DEV_AUTO_LOGIN_EMAIL=admin@agronet.are-dev.es
              EOL
              
              chown ec2-user:ec2-user /home/ec2-user/Frontend/.env
              chmod 600 /home/ec2-user/Frontend/.env
              
              # Obtener certificados con Certbot
              echo "Intentando obtener certificados con Certbot..."
              USE_HTTPS=false
              
              certbot certonly --dns-route53 \
                --non-interactive \
                --agree-tos \
                -m admin@agronet.are-dev.es \
                -d are-dev.es \
                -d www.agronet.are-dev.es \
                --server https://acme-v02.api.letsencrypt.org/directory || echo "No se pudieron obtener los certificados SSL"
                
              # Configurar certificados si existen
              if [ -d "/etc/letsencrypt/live/are-dev.es" ]; then
                USE_HTTPS=true
                mkdir -p /home/ec2-user/Frontend/certs
                cp /etc/letsencrypt/live/are-dev.es/fullchain.pem /home/ec2-user/Frontend/certs/
                cp /etc/letsencrypt/live/are-dev.es/privkey.pem /home/ec2-user/Frontend/certs/
                chown -R ec2-user:ec2-user /home/ec2-user/Frontend/certs
                chmod 700 /home/ec2-user/Frontend/certs
                chmod 600 /home/ec2-user/Frontend/certs/*.pem
                sudo systemctl enable crond
                sudo systemctl start crond
                
                # Script para renovación
                cat > /usr/local/bin/renew-certs.sh << EOL2
              #!/bin/bash
              cp /etc/letsencrypt/live/www.agronet.are-dev.es/fullchain.pem /home/ec2-user/Frontend/certs/
              cp /etc/letsencrypt/live/www.agronet.are-dev.es/privkey.pem /home/ec2-user/Frontend/certs/
              chown -R ec2-user:ec2-user /home/ec2-user/Frontend/certs
              chmod 700 /home/ec2-user/Frontend/certs
              chmod 600 /home/ec2-user/Frontend/certs/*.pem
              systemctl restart astro-frontend
              EOL2
                chmod +x /usr/local/bin/renew-certs.sh
                
                # Configurar cron
                mkdir -p /etc/cron.d
                echo "0 0,12 * * * root certbot renew --quiet --deploy-hook /usr/local/bin/renew-certs.sh" > /etc/cron.d/certbot-renew
                chmod 644 /etc/cron.d/certbot-renew
              fi
              
              # Instalar dependencias y compilar
              cd /home/ec2-user/Frontend
              sudo -u ec2-user npm install --platform=linux --arch=x64 @rollup/rollup-linux-x64-gnu lightningcss-linux-x64-gnu --force
              sudo -u ec2-user npm install || echo "Error en npm install"
              sudo -u ec2-user npm run build || USE_DEV_MODE=true
              
              # Configurar servicio
              if [ "$USE_DEV_MODE" = "true" ]; then
                cat > /etc/systemd/system/astro-frontend.service << EOL
              [Unit]
              Description=AgroNet Astro Frontend (Dev Mode)
              After=network.target
              
              [Service]
              Type=simple
              User=ec2-user
              WorkingDirectory=/home/ec2-user/Frontend
              Environment="HOST=0.0.0.0"
              Environment="PORT=4321"
              Environment="NODE_OPTIONS=--dns-result-order=ipv4first --no-warnings"
              ExecStart=/usr/bin/npm run dev
              Restart=always
              RestartSec=10
              MemoryLimit=512M
              CPUQuota=80%
              
              [Install]
              WantedBy=multi-user.target
              EOL
              else
                if [ "$USE_HTTPS" = "true" ]; then
                  cat > /etc/systemd/system/astro-frontend.service << EOL
              [Unit]
              Description=AgroNet Astro Frontend (HTTPS)
              After=network.target
              
              [Service]
              Type=simple
              User=ec2-user
              WorkingDirectory=/home/ec2-user/Frontend
              Environment="HOST=0.0.0.0"
              Environment="PORT=4321"
              Environment="SITE_URL=https://www.agronet.are-dev.es"
              Environment="PUBLIC_SITE_URL=https://www.agronet.are-dev.es"
              Environment="NODE_OPTIONS=--dns-result-order=ipv4first --no-warnings"
              ExecStart=/usr/bin/node ./dist/server/entry.mjs
              Restart=always
              RestartSec=10
              MemoryLimit=512M
              CPUQuota=80%
              
              [Install]
              WantedBy=multi-user.target
              EOL
                else
                  cat > /etc/systemd/system/astro-frontend.service << EOL
              [Unit]
              Description=AgroNet Astro Frontend (HTTP)
              After=network.target
              
              [Service]
              Type=simple
              User=ec2-user
              WorkingDirectory=/home/ec2-user/Frontend
              Environment="HOST=0.0.0.0"
              Environment="PORT=4321"
              Environment="SITE_URL=http://www.agronet.are-dev.es"
              Environment="PUBLIC_SITE_URL=http://www.agronet.are-dev.es"
              Environment="NODE_OPTIONS=--dns-result-order=ipv4first --no-warnings"
              ExecStart=/usr/bin/node ./dist/server/entry.mjs
              Restart=always
              RestartSec=10
              MemoryLimit=512M
              CPUQuota=80%
              
              [Install]
              WantedBy=multi-user.target
              EOL
                fi
              fi
              
              # Iniciar servicio
              systemctl daemon-reload
              systemctl enable astro-frontend
              systemctl start astro-frontend
              
              # Scripts de utilidad
              cat > /usr/local/bin/check-astro << EOL
              #!/bin/bash
              echo "===== Astro Frontend Status ====="
              systemctl status astro-frontend
              echo ""
              
              echo "===== Servicio activo? ====="
              if systemctl is-active --quiet astro-frontend; then
                echo "El servicio está ACTIVO"
              else
                echo "El servicio está INACTIVO"
              fi
              echo ""
              
              echo "===== Astro Frontend Logs ====="
              journalctl -u astro-frontend -n 50
              echo ""
              
              echo "===== Verificando puertos en uso ====="
              ss -tulpn | grep 4321
              echo ""
              
              echo "===== Verificando certificados SSL ====="
              if [ -d "/etc/letsencrypt/live/www.agronet.are-dev.es" ]; then
                echo "Certificados encontrados en /etc/letsencrypt/live/www.agronet.are-dev.es"
                ls -la /etc/letsencrypt/live/www.agronet.are-dev.es
                echo ""
                echo "Fecha de vencimiento:"
                openssl x509 -in /etc/letsencrypt/live/www.agronet.are-dev.es/cert.pem -noout -dates
              else
                echo "No se encontraron certificados SSL"
              fi
              echo ""
              
              echo "===== Variables de entorno ====="
              grep -v "SECRET\|KEY\|PASS" /home/ec2-user/Frontend/.env
              echo ""
              
              echo "===== Información del sistema ====="
              free -h
              df -h
              EOL
              chmod 755 /usr/local/bin/check-astro
              
              # Limpiar credenciales
              rm -f /home/ec2-user/.git-credentials
              rm -f /root/.aws/credentials
              EOFSCRIPT
              
              # Guardar variables en archivos temporales
              echo "${GitHubToken}" > /tmp/github_token
              echo "${AWSAccessKeyId}" > /tmp/aws_access_key
              echo "${AWSSecretAccessKey}" > /tmp/aws_secret_key
              echo "${AWSRegion}" > /tmp/aws_region
              echo "${S3BucketName}" > /tmp/s3_bucket
              echo "${EnvironmentName}" > /tmp/environment_name
              
              # Ejecutar script
              chmod +x /tmp/setup.sh
              /tmp/setup.sh
              
              # Limpiar
              rm -f /tmp/setup.sh /tmp/github_token /tmp/aws_access_key /tmp/aws_secret_key /tmp/aws_region /tmp/s3_bucket /tmp/environment_name
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: !Sub ${EnvironmentName}-Frontend-Instance
              - Key: Environment
                Value: !Ref EnvironmentName

  # Auto Scaling Groups
  FrontendASG1:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Frontend-ASG-1
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-Public-Subnet-1-ID"
      TargetGroupARNs:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-TG-ARN"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Frontend-ASG-1
          PropagateAtLaunch: true

  FrontendASG2:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Frontend-ASG-2
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-Public-Subnet-2-ID"
      TargetGroupARNs:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-TG-ARN"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Frontend-ASG-2
          PropagateAtLaunch: true

  FrontendASG3:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub ${EnvironmentName}-Frontend-ASG-3
      LaunchTemplate:
        LaunchTemplateId: !Ref FrontendLaunchTemplate
        Version: !GetAtt FrontendLaunchTemplate.LatestVersionNumber
      MinSize: !Ref MinSize
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
      VPCZoneIdentifier:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-Public-Subnet-3-ID"
      TargetGroupARNs:
        - !ImportValue 
          Fn::Sub: "${EnvironmentName}-Frontend-TG-ARN"
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: !Sub ${EnvironmentName}-Frontend-ASG-3
          PropagateAtLaunch: true

  # Alarmas y políticas de Auto Scaling - Scale Out
  HighCPUAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG1-HighCPU"
      AlarmDescription: "Alarma por alto uso de CPU en Frontend ASG1"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleOutThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG1
      AlarmActions:
        - !Ref FrontendScaleOutPolicy1

  HighCPUAlarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG2-HighCPU"
      AlarmDescription: "Alarma por alto uso de CPU en Frontend ASG2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleOutThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG2
      AlarmActions:
        - !Ref FrontendScaleOutPolicy2

  HighCPUAlarm3:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG3-HighCPU"
      AlarmDescription: "Alarma por alto uso de CPU en Frontend ASG3"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleOutThreshold
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG3
      AlarmActions:
        - !Ref FrontendScaleOutPolicy3

  # Alarmas - Scale In
  LowCPUAlarm1:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG1-LowCPU"
      AlarmDescription: "Alarma por bajo uso de CPU en Frontend ASG1"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleInThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG1
      AlarmActions:
        - !Ref FrontendScaleInPolicy1

  LowCPUAlarm2:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG2-LowCPU"
      AlarmDescription: "Alarma por bajo uso de CPU en Frontend ASG2"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleInThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG2
      AlarmActions:
        - !Ref FrontendScaleInPolicy2

  LowCPUAlarm3:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${EnvironmentName}-Frontend-ASG3-LowCPU"
      AlarmDescription: "Alarma por bajo uso de CPU en Frontend ASG3"
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: !Ref ScaleInThreshold
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref FrontendASG3
      AlarmActions:
        - !Ref FrontendScaleInPolicy3

  # Políticas de escalado
  FrontendScaleOutPolicy1:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG1
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: !Ref ScaleOutCooldown

  FrontendScaleOutPolicy2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG2
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: !Ref ScaleOutCooldown

  FrontendScaleOutPolicy3:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG3
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: 1
      Cooldown: !Ref ScaleOutCooldown

  FrontendScaleInPolicy1:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG1
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: !Ref ScaleInCooldown

  FrontendScaleInPolicy2:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG2
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: !Ref ScaleInCooldown

  FrontendScaleInPolicy3:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref FrontendASG3
      PolicyType: SimpleScaling
      AdjustmentType: ChangeInCapacity
      ScalingAdjustment: -1
      Cooldown: !Ref ScaleInCooldown

Outputs:
  FrontendLaunchTemplateId:
    Description: ID de la Launch Template del Frontend
    Value: !Ref FrontendLaunchTemplate
    Export:
      Name: !Sub "${EnvironmentName}-Frontend-LaunchTemplate-ID"

  FrontendASG1Name:
    Description: Nombre del ASG 1 de Frontend
    Value: !Ref FrontendASG1
    Export:
      Name: !Sub "${EnvironmentName}-Frontend-ASG1-Name"

  FrontendASG2Name:
    Description: Nombre del ASG 2 de Frontend
    Value: !Ref FrontendASG2
    Export:
      Name: !Sub "${EnvironmentName}-Frontend-ASG2-Name"

  FrontendASG3Name:
    Description: Nombre del ASG 3 de Frontend
    Value: !Ref FrontendASG3
    Export:
      Name: !Sub "${EnvironmentName}-Frontend-ASG3-Name" 